type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: String
  signer: Account #create relation to account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String!
  method: String!
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrins
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args: String
  timestamp: Date
  isSuccess: Boolean

  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call
  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  amount: BigInt

  extrinsic: Extrinsic #create relation to extrinsic
  call: Call #create relation to call
  timestamp: Date
  isSuccess: Boolean
}

# todo, add domain transfer event
type TransferDomain @entity {
  id: ID!
  from: Account
  to: Account
  domain: String
}

type Domain @entity {
  id: ID!

  domain: String
  owner: Account
  relay: String #crosschain account, current keep empty,
  ethereum: String
  deposit: BigInt
  registered: Boolean

  lastPrice: BigInt # USDT or NAME,todo to save
}

type NFT @entity {
  id: ID!

  classId: Int
  tokenId: Int

  domainInfo: Domain
}

type Auction @entity {
  id: ID!

  creator: Account
  token0: NFT
  token1: Int
  min1: BigInt
  duration: Int
  startAt: BigInt
  endAt: BigInt
  timestampCreate: Date
  isCanceled: Boolean
  isTaked: Boolean
  winner: Account
  winnerAmount: BigInt
  timestampTaker: Date
}

type AuctionHistory @entity {
  id: ID!

  auction: Auction
  bidder: Account
  amount: BigInt
  isWinner: Boolean
  timestamp: Date
}

type Order @entity {
  id: ID!

  maker: Account
  token0: NFT
  token1: Int
  total1: BigInt
  timestampCreate: Date
  isCanceled: Boolean
  isTaked: Boolean
  taker: Account
  takerAmount: BigInt
  timestampTaker: Date
}

type NameTransfer @entity {
  id: ID!

  from: Account
  to: Account
  amount: BigInt
  timestamp: Date
  extrinsic: Extrinsic
}
